{"version":3,"sources":["components/calendar/TableData.js","loadData.js","components/calendar/calendar.js"],"names":["TableData","columns","json","content","SERVER_URL","window","location","href","includes","getRemoteObjects","promise","fetch","then","response","getRemoteArticle","name","getSpeakerList","getSpeaker","id","options","weekday","year","month","day","dateTimeFormat","Intl","DateTimeFormat","Calendar","tableId","container","document","getElementById","tableData","setColumns","link","format","label","table","createElement","firstChild","removeChild","appendChild","onload","e","console","log","dataLoaded","loadData","buildTable","row","createTHead","insertRow","getColumns","forEach","column","cell","insertCell","createTextNode","className","data","buildRows","tbody","createTBody","value","text","Date","span","a","setAttribute","index","init"],"mappings":"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","file":"calendar.5fba0966.map","sourceRoot":"..","sourcesContent":["export default class TableData {\n    constructor() {\n\n    }\n\n    setColumns(columns) {\n        this.columns = columns;\n    }\n\n    getColumns() {\n        return this.columns;\n    }\n\n    setContent(json){\n        this.content = json;\n    }\n}","let SERVER_URL = window.location.href.includes('localhost')?'http://localhost:8080':'https://www.jconf.org';\n\nexport function getRemoteObjects() {\n    const promise = fetch(SERVER_URL + '/api/conferences');\n    return promise.then(\n        response => {\n             return response.json()\n        });\n}\n\nexport function getRemoteArticle(name) {\n    const promise = fetch(SERVER_URL + '/api/post/html/'+name);\n    return promise.then(\n        response => {\n            return response;\n        });\n}\n\nexport function getSpeakerList() {\n    const promise = fetch(SERVER_URL + '/api/speaker/list');\n    return promise.then(\n        response => {\n            return response;\n        });\n\n}\n\nexport function getSpeaker(id) {\n    const promise = fetch(SERVER_URL + '/api/speaker/id/' + id);\n    return promise.then(\n        response => {\n            return response;\n        });\n\n}\n\n","import TableData from \"./TableData\";\nimport * as loadData from \"../../loadData\";\n\nlet options = {weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'};\nlet dateTimeFormat = new Intl.DateTimeFormat('de-DE');\n\nexport default class Calendar {\n\n\n    constructor(tableId) {\n        this.container = document.getElementById('tableContainer');\n\n        this.tableData = new TableData();\n        this.tableData.setColumns([{name: 'name', link: 'website'},\n            {name: 'begin', format: 'date'},\n            {name: 'end', format: 'date'},\n            {name: 'city'},\n            {name: 'isoCountry', label:' ', format: 'flag'},\n            {name: 'country'},\n\n            {name: 'cfp', format: 'date'}]);\n        this.table = document.createElement('table');\n\n        while (this.container.firstChild) {\n            this.container.removeChild(this.container.firstChild);\n        }\n        this.container.appendChild(this.table);\n\n    };\n\n    init() {\n        window.onload = e => console.log(\"load\", e);\n\n        let dataLoaded = loadData.getRemoteObjects();\n        this.buildTable(dataLoaded);\n    }\n\n    buildTable(dataLoaded) {\n        let thead = this.table.createTHead();\n        let row = thead.insertRow();\n\n\n        this.tableData.getColumns().forEach(\n            column => {\n                let cell = row.insertCell();\n                cell.appendChild(document.createTextNode(column.label ? column.label : column.name));\n                cell.className = 'table-' + column.format + ' ' + 'table-row-'+column.name;\n            });\n\n\n        dataLoaded.then(\n            data =>\n                this.buildRows(data)\n        )\n    }\n\n    buildRows(data) {\n        let tbody = this.table.createTBody();\n        data.forEach(\n            value => {\n                let row = tbody.insertRow();\n                this.tableData.getColumns().forEach(\n                    column => {\n                        let cell = row.insertCell();\n                        // Append a text node to the cell\n                        let text = (value[column.name]);\n\n                        if (column.format && column.format === 'date') {\n                            if (text) {\n                                text = dateTimeFormat.format(new Date(text), options);\n                            } else {\n                                text = '';\n\n                            }\n                            cell.className = 'table-' + column.format + ' ';\n                            cell.appendChild(document.createTextNode(text));\n                        } else if (column.format && column.format === 'flag') {\n                            let span = document.createElement('span');\n                            cell.appendChild(span);\n                            span.className = \"flag-icon flag-icon-\" + text;\n                        } else {\n                            if (column.link) {\n                                let a = document.createElement('a');\n                                a.setAttribute('href', value[column.link]);\n                                cell.appendChild(a);\n                                a.appendChild(document.createTextNode(text));\n                            } else {\n                                cell.appendChild(document.createTextNode(text));\n                            }\n                        }\n                        cell.className += \"col-\" + column.name;\n\n                    }\n                )\n\n\n            })\n    }\n\n}\nlet index = new Calendar().init();\n"]}