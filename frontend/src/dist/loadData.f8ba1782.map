{"version":3,"sources":["TableData.js","components/calendar/calendar.js","loadData.js"],"names":["TableData","columns","json","content","options","weekday","year","month","day","dateTimeFormat","Intl","DateTimeFormat","Calendar","tableId","container","document","getElementById","tableData","setColumns","name","link","format","table","createElement","firstChild","removeChild","appendChild","console","log","window","onload","e","dataLoaded","loadData","getRemoteObjects","buildTable","row","createTHead","insertRow","getColumns","forEach","column","cell","insertCell","createTextNode","className","then","data","buildRows","tbody","createTBody","value","text","Date","span","a","setAttribute","url","index","init","promise","fetch","response"],"mappings":"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","file":"loadData.f8ba1782.map","sourceRoot":"..","sourcesContent":["export default class TableData {\n    constructor() {\n\n    }\n\n    setColumns(columns) {\n        this.columns = columns;\n    }\n\n    getColumns() {\n        return this.columns;\n    }\n\n    setContent(json){\n        this.content = json;\n    }\n}","import TableData from \"../../TableData\";\nimport * as loadData from \"../../loadData\";\n\nlet options = {weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'};\nlet dateTimeFormat = new Intl.DateTimeFormat('de-DE');\n\nexport default class Calendar {\n\n\n    constructor(tableId) {\n        this.container = document.getElementById('tableContainer');\n\n        this.tableData = new TableData();\n        this.tableData.setColumns([{name: 'name', link: 'website'}, {name: 'begin', format: 'date'}, {\n            name: 'end',\n            format: 'date'\n        }, {name: 'city'}, {name: 'country'}, {name: 'isoCountry', format: 'flag'}, {name: 'cfp', format: 'date'}]);\n        this.table = document.createElement('table');\n\n        while (this.container.firstChild) {\n            this.container.removeChild(this.container.firstChild);\n        }\n        this.container.appendChild(this.table);\n        console.log('constructor init3');\n\n    };\n\n    init() {\n        console.log('index init');\n        window.onload = e => console.log(\"load\", e);\n\n        let dataLoaded = loadData.getRemoteObjects();\n        console.log('dataLoaded', dataLoaded);\n        this.buildTable(dataLoaded);\n    }\n\n    buildTable(dataLoaded) {\n        let thead = this.table.createTHead();\n        let row = thead.insertRow();\n\n        this.tableData.getColumns().forEach(\n            column => {\n                let cell = row.insertCell();\n                cell.appendChild(document.createTextNode(column.name));\n                cell.className = 'table-' + column.format + ' ' + 'table-row-'+column.name;\n            });\n\n\n        dataLoaded.then(\n            data =>\n                this.buildRows(data)\n        )\n    }\n\n    buildRows(data) {\n        let tbody = this.table.createTBody();\n        data.forEach(\n            value => {\n                let row = tbody.insertRow();\n                this.tableData.getColumns().forEach(\n                    column => {\n                        let cell = row.insertCell();\n                        // Append a text node to the cell\n                        let text = (value[column.name]);\n\n                        if (column.format && column.format === 'date') {\n                            if (text) {\n                                text = dateTimeFormat.format(new Date(text), options);\n                            } else {\n                                text = '';\n\n                            }\n                            cell.className = 'table-' + column.format + ' ';\n                            cell.appendChild(document.createTextNode(text));\n                        } else if (column.format && column.format === 'flag') {\n                            let span = document.createElement('span');\n                            cell.appendChild(span);\n                            span.className = \"flag-icon flag-icon-\" + text;\n                        } else {\n                            if (column.link) {\n                                let a = document.createElement('a');\n                                a.setAttribute('href', value[column.link]);\n                                cell.appendChild(a);\n                                a.appendChild(document.createTextNode(text));\n                            } else {\n                                cell.appendChild(document.createTextNode(text));\n                            }\n                        }\n                        cell.className += \"col-\" + column.name;\n\n                    }\n                )\n\n\n            })\n    }\n\n}\n","import Calendar from './components/calendar/calendar'\n\nconst url = 'http://www.jconf.org/api/conferences';\n\nlet index = new Calendar().init();\nexport function getRemoteObjects() {\n    const promise = fetch(url);\n    return promise.then(\n        response => {\n             return response.json()\n        });\n}\n"]}